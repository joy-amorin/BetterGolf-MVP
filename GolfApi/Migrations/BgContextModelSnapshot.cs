// <auto-generated />
using System;
using GolfApi.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace GolfApi.Migrations
{
    [DbContext(typeof(BgContext))]
    partial class BgContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CategoryPlayer", b =>
                {
                    b.Property<int>("CategoriesId")
                        .HasColumnType("integer");

                    b.Property<int>("PlayersId")
                        .HasColumnType("integer");

                    b.HasKey("CategoriesId", "PlayersId");

                    b.HasIndex("PlayersId");

                    b.ToTable("CategoryPlayer");
                });

            modelBuilder.Entity("CourseHole", b =>
                {
                    b.Property<int>("CoursesId")
                        .HasColumnType("integer");

                    b.Property<int>("HolesId")
                        .HasColumnType("integer");

                    b.HasKey("CoursesId", "HolesId");

                    b.HasIndex("HolesId");

                    b.ToTable("CourseHole");
                });

            modelBuilder.Entity("GolfApi.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Count")
                        .HasColumnType("integer");

                    b.Property<int?>("LadiesCourseId")
                        .HasColumnType("integer");

                    b.Property<int>("MaxAge")
                        .HasColumnType("integer");

                    b.Property<double>("MaxHcap")
                        .HasColumnType("double precision");

                    b.Property<int>("MinAge")
                        .HasColumnType("integer");

                    b.Property<double>("MinHcap")
                        .HasColumnType("double precision");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("NumberOfHoles")
                        .HasColumnType("integer");

                    b.Property<int?>("OpenCourseId")
                        .HasColumnType("integer");

                    b.Property<int?>("ParentCategoryId")
                        .HasColumnType("integer");

                    b.Property<string>("Sex")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("TournamentId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("LadiesCourseId");

                    b.HasIndex("OpenCourseId");

                    b.HasIndex("ParentCategoryId");

                    b.HasIndex("TournamentId");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("GolfApi.Models.Course", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<double>("CourseRating")
                        .HasColumnType("double precision");

                    b.Property<int>("CourseSlope")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Par")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("GolfApi.Models.Default", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Key")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Defaults");
                });

            modelBuilder.Entity("GolfApi.Models.Hole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.Property<int>("Par")
                        .HasColumnType("integer");

                    b.Property<int>("StrokeIndex")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Holes");
                });

            modelBuilder.Entity("GolfApi.Models.Player", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateOnly>("Birthdate")
                        .HasColumnType("date");

                    b.Property<double>("HandicapIndex")
                        .HasColumnType("double precision");

                    b.Property<bool>("IsPreferredCategoryLadies")
                        .HasColumnType("boolean");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("MatriculaAUG")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Players");
                });

            modelBuilder.Entity("GolfApi.Models.Result", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("NetScore")
                        .HasColumnType("integer");

                    b.Property<int>("Placement")
                        .HasColumnType("integer");

                    b.Property<int>("PlayerId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PlayerId");

                    b.ToTable("Results");
                });

            modelBuilder.Entity("GolfApi.Models.RoundInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("FirstRoundTime")
                        .HasColumnType("integer");

                    b.Property<int>("Interval")
                        .HasColumnType("integer");

                    b.Property<bool>("IsShotgun")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.ToTable("RoundInfos");
                });

            modelBuilder.Entity("GolfApi.Models.Scorecard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("PlayerId")
                        .HasColumnType("integer");

                    b.Property<int>("PlayingHandicap")
                        .HasColumnType("integer");

                    b.Property<int?>("TournamentId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PlayerId");

                    b.HasIndex("TournamentId");

                    b.ToTable("Scorecards");
                });

            modelBuilder.Entity("GolfApi.Models.ScorecardResult", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("HoleId")
                        .HasColumnType("integer");

                    b.Property<int>("RoundNumber")
                        .HasColumnType("integer");

                    b.Property<int?>("ScorecardId")
                        .HasColumnType("integer");

                    b.Property<int>("Strokes")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("HoleId");

                    b.HasIndex("ScorecardId");

                    b.ToTable("ScorecardResults");
                });

            modelBuilder.Entity("GolfApi.Models.Tournament", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Count")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateOnly>("EndDate")
                        .HasColumnType("date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("RoundInfoId")
                        .HasColumnType("integer");

                    b.Property<DateOnly>("StartDate")
                        .HasColumnType("date");

                    b.Property<string>("TournamentType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoundInfoId");

                    b.ToTable("Tournaments");
                });

            modelBuilder.Entity("PlayerTournament", b =>
                {
                    b.Property<int>("PlayersId")
                        .HasColumnType("integer");

                    b.Property<int>("TournamentsId")
                        .HasColumnType("integer");

                    b.HasKey("PlayersId", "TournamentsId");

                    b.HasIndex("TournamentsId");

                    b.ToTable("PlayerTournament");
                });

            modelBuilder.Entity("CategoryPlayer", b =>
                {
                    b.HasOne("GolfApi.Models.Category", null)
                        .WithMany()
                        .HasForeignKey("CategoriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GolfApi.Models.Player", null)
                        .WithMany()
                        .HasForeignKey("PlayersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CourseHole", b =>
                {
                    b.HasOne("GolfApi.Models.Course", null)
                        .WithMany()
                        .HasForeignKey("CoursesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GolfApi.Models.Hole", null)
                        .WithMany()
                        .HasForeignKey("HolesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GolfApi.Models.Category", b =>
                {
                    b.HasOne("GolfApi.Models.Course", "LadiesCourse")
                        .WithMany()
                        .HasForeignKey("LadiesCourseId");

                    b.HasOne("GolfApi.Models.Course", "OpenCourse")
                        .WithMany()
                        .HasForeignKey("OpenCourseId");

                    b.HasOne("GolfApi.Models.Category", "ParentCategory")
                        .WithMany("ChildrenCategories")
                        .HasForeignKey("ParentCategoryId");

                    b.HasOne("GolfApi.Models.Tournament", "Tournament")
                        .WithMany("Categories")
                        .HasForeignKey("TournamentId");

                    b.Navigation("LadiesCourse");

                    b.Navigation("OpenCourse");

                    b.Navigation("ParentCategory");

                    b.Navigation("Tournament");
                });

            modelBuilder.Entity("GolfApi.Models.Result", b =>
                {
                    b.HasOne("GolfApi.Models.Player", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Player");
                });

            modelBuilder.Entity("GolfApi.Models.Scorecard", b =>
                {
                    b.HasOne("GolfApi.Models.Player", "Player")
                        .WithMany("Scorecards")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GolfApi.Models.Tournament", "Tournament")
                        .WithMany("Scorecards")
                        .HasForeignKey("TournamentId");

                    b.Navigation("Player");

                    b.Navigation("Tournament");
                });

            modelBuilder.Entity("GolfApi.Models.ScorecardResult", b =>
                {
                    b.HasOne("GolfApi.Models.Hole", "Hole")
                        .WithMany()
                        .HasForeignKey("HoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GolfApi.Models.Scorecard", null)
                        .WithMany("ScorecardResults")
                        .HasForeignKey("ScorecardId");

                    b.Navigation("Hole");
                });

            modelBuilder.Entity("GolfApi.Models.Tournament", b =>
                {
                    b.HasOne("GolfApi.Models.RoundInfo", "RoundInfo")
                        .WithMany()
                        .HasForeignKey("RoundInfoId");

                    b.Navigation("RoundInfo");
                });

            modelBuilder.Entity("PlayerTournament", b =>
                {
                    b.HasOne("GolfApi.Models.Player", null)
                        .WithMany()
                        .HasForeignKey("PlayersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GolfApi.Models.Tournament", null)
                        .WithMany()
                        .HasForeignKey("TournamentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GolfApi.Models.Category", b =>
                {
                    b.Navigation("ChildrenCategories");
                });

            modelBuilder.Entity("GolfApi.Models.Player", b =>
                {
                    b.Navigation("Scorecards");
                });

            modelBuilder.Entity("GolfApi.Models.Scorecard", b =>
                {
                    b.Navigation("ScorecardResults");
                });

            modelBuilder.Entity("GolfApi.Models.Tournament", b =>
                {
                    b.Navigation("Categories");

                    b.Navigation("Scorecards");
                });
#pragma warning restore 612, 618
        }
    }
}
